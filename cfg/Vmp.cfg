#!/usr/bin/env python
# Example config: https://github.com/ros/dynamic_reconfigure/blob/noetic-devel/cfg/Test.cfg

PACKAGE = "view_motion_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

ig_enum = gen.enum(
    [ gen.const("UNK_CELLS", int_t, 0, "Unknown cell count"),
      gen.const("UNK_CELLS_WEIGHTED_TARGET", int_t, 1, "Unknown cell * (target_vps + 1) / (total_vps + 1)")
    ], "An enum to select information gain computation")

goal_select_enum = gen.enum(
    [ gen.const("BEST_INFOGAIN", int_t, 0, "Select navigation goal with highest information gain"),
      gen.const("BEST_UTILITY", int_t, 1, "Select navigation goal with highest utilty")
    ], "An enum to select navigation goal selection criterium")

gen.add("ig_type", int_t, 1 << 0, "Select the information gain computation", 1, 0, 1, edit_method=ig_enum)

gen.add("max_nb_connect_count", int_t, 1 << 1, "Maximum neighbors to try to connect", 5, 1, 20)
gen.add("max_nb_connect_dist", double_t, 1 << 1, "Maximum distance for neighbors to connect", 2.0, 0.0, 20.0)
gen.add("max_start_state_connect_count", int_t, 1 << 1, "Maximum start state neighbors to try to connect", 5, 1, 20)
gen.add("max_start_state_connect_dist", double_t, 1 << 1, "Maximum distance for start state neighbors to connect", 10.0, 0.0, 20.0)

gen.add("graph_building_time", double_t, 1 << 2, "Time to build up graph", 5.0, 1.0, 20.0)
gen.add("graph_search_time", double_t, 1 << 2, "Maximum time to search graph for best path", 2.0, 1.0, 20.0)

gen.add("goal_select_type", int_t, 1 << 3, "Select navigation goal selection criterium", 0, 0, 1, edit_method=goal_select_enum)

gen.add("sensor_min_range", double_t, 1 << 5, "Minimum range for the sensor", 0.2, 0, 2)
gen.add("sensor_max_range", double_t, 1 << 6, "Maximum range for the sensor", 0.6, 0, 2)

gen.add("execution_cost_limit", double_t, 1 << 7, "Maximum joint distance to move in one step", 5.0, 0.0, 20.0)

gen.add("visualize_expanded", bool_t, 1 << 8, "Maximum joint distance to move in one step", True)
gen.add("visualize_unexpanded", bool_t, 1 << 8, "Maximum joint distance to move in one step", False)

gen.add("roi_target_ratio", double_t, 1 << 9, "Percentage of ROI targets selected", 0.5, 0.0, 1.0)
gen.add("expl_target_ratio", double_t, 1 << 10, "Percentage of expl targets selected", 0.3, 0.0, 1.0)
gen.add("border_target_ratio", double_t, 1 << 11, "Percentage of border targets selected", 0.2, 0.0, 1.0)

exit(gen.generate(PACKAGE, "planner_node", "Vmp"))
